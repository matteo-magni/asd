name: Reusable publish workflow

on:
  workflow_call:
    inputs:
      package_version:
        type: string
        required: true
      package_name:
        type: string
        required: true
      package_provider:
        type: string
        required: true
      run-test:
        type: boolean
        default: false
      kubernetes-version:
        type: string
        default: v1.24.6
      kind-version:
        type: string
        default: v0.16.0
    outputs:
      package_repository:
        value: ${{ jobs.publish.outputs.package_repository }}
      package_registry:
        value: ${{ jobs.publish.outputs.package_registry }}

jobs:

  publish:
    runs-on: ubuntu-latest

    outputs:
      package_repository: ${{ env.PACKAGE_REPOSITORY }}
      package_registry: ${{ env.PACKAGE_REGISTRY }}

    env:
      PACKAGE_VERSION: ${{ inputs.package_version }}
      PACKAGE_REGISTRY: ghcr.io
      PACKAGE_REPOSITORY: ${{ github.repository }}/${{ inputs.package_provider }}/crossplane/${{ inputs.package_name }}
      PACKAGE_PROVIDER: ${{ inputs.package_provider }}
      PACKAGE_NAME: ${{ inputs.package_name }}

    steps:

      - name: Dump info
        run: |
          env | sort

  test:
    if: inputs.run-test
    uses: ./.github/workflows/test.yml
    needs:
      - publish
    with:
      package_version: ${{ inputs.package_version }}
      package_name: ${{ inputs.package_name }}
      package_provider: ${{ inputs.package_provider }}

  # test:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - publish
  #   if: inputs.run-test
  #   env:
  #     CONFIG_VERSION: ${{ inputs.package_version }}
  #     CONFIG_IMAGE: ${{ needs.publish.outputs.package_registry }}/${{ needs.publish.outputs.package_repository }}

  #   steps:

  #     - name: Dump info
  #       run: |
  #         env | sort

  #     - name: Create k8s Kind Cluster
  #       uses: helm/kind-action@v1.4.0
  #       with:
  #         verbosity: 5
  #         version: ${{ inputs.kind-version }}
  #         kubectl_version: ${{ inputs.kubernetes-version }}
  #         node_image: kindest/node:${{ inputs.kubernetes-version }}

  #     - name: Verify Cluster
  #       run: |
  #         kubectl version
  #         which kubectl
  #         kubectl cluster-info
  #         kubectl get storageclass standard

  #     - name: Create Azure Config Secret
  #       if: inputs.provider == 'azure'
  #       run: |
  #         kubectl create namespace upbound-system
  #         kubectl create secret generic azure-secret -n upbound-system --from-literal=creds='${{ secrets.AZURE_CONFIG }}'

  #     - name: Test Crossplane Package
  #       run: |
  #         [ -x ./crossplane-e2e-${{ inputs.package }}.sh ] && ./crossplane-e2e-${{ inputs.package }}.sh
  #         exit 1

  #     - name: Cleanup Package
  #       run: |
  #         [ -x ./${{ inputs.package }}/crossplane-e2e-cleanup.sh ] && ./${{ inputs.package }}/crossplane-e2e-cleanup.sh
